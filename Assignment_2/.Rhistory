# We have converted all categorical variables to dummy variables
# Let's create a new sample
new_customer <- data.frame(
Age = 40,
Experience = 10,
Income = 84,
Family = 2,
CCAvg = 2,
Education.1 = 0,
Education.2 = 1,
Education.3 = 0,
Mortgage = 0,
Securities.Account = 0,
CD.Account = 0,
Online = 1,
CreditCard = 1
)
# Normalize the new customer
new.cust.norm <- new_customer
new.cust.norm <- predict(norm.values, new.cust.norm)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(caret)
library(ISLR)
library(gmodels)
library(class)
library(e1071)
UniversalBank_1_ <- read_csv("~/Downloads/UniversalBank (1).csv")
View(UniversalBank_1_)
#norm_model<-preProcess(train_data[ ,-10], method=c("center", "scale"))
#train.normalized<-predict(norm_model, train_data[ , -10])
#validation.normalized<-predict(norm_model, validation_data[ ,-10])
#head(norm_model)
train.norm.df <- train_data[,-10]
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(caret)
library(ISLR)
library(gmodels)
library(class)
library(e1071)
UniversalBank_1_ <- read_csv("~/Downloads/UniversalBank (1).csv")
View(UniversalBank_1_)
data1<-UniversalBank_1_[ ,-5]
data<-data1[ ,-1]
head(data)
data$Education<-as.factor(data$Education)
data$Education<-as.factor(data$Education)
data$Education<-as.factor(data$Education)
dummy_model<-dummyVars(~., data= data)
data<-as.data.frame(predict(dummy_model, data))
head(data)
train_index<-createDataPartition(data$Age, p=0.6, list=FALSE)
train_data<-data[train_index, ]
validation_data<-data[-train_index, ]
#norm_model<-preProcess(train_data[ ,-10], method=c("center", "scale"))
#train.normalized<-predict(norm_model, train_data[ , -10])
#validation.normalized<-predict(norm_model, validation_data[ ,-10])
#head(norm_model)
train.norm.df <- train_data[,-10]
valid.norm.df <- validation_data[,-10]
norm.values <- preProcess(train_data[,-10], method=c("center", "scale"))
train.norm.df <- predict(norm.values, train_data[,-10])
valid.norm.df <- predict(norm.values, validation_data[,-10])
# We have converted all categorical variables to dummy variables
# Let's create a new sample
new_customer <- data.frame(
Age = 40,
Experience = 10,
Income = 84,
Family = 2,
CCAvg = 2,
Education.1 = 0,
Education.2 = 1,
Education.3 = 0,
Mortgage = 0,
Securities.Account = 0,
CD.Account = 0,
Online = 1,
CreditCard = 1
)
# Normalize the new customer
new.cust.norm <- new_customer
new.cust.norm <- predict(norm.values, new.cust.norm)
# We have converted all categorical variables to dummy variables
# Let's create a new sample
new_customer <- data.frame(
Age = 40,
Experience = 10,
Income = 84,
Family = 2,
CCAvg = 2,
Education.1 = 0,
Education.2 = 1,
Education.3 = 0,
Mortgage = 0,
Securities.Account = 0,
CD.Account = 0,
Online = 1,
CreditCard = 1
)
# Normalize the new customer
new.cust.norm <- new_customer
new.cust.norm <- predict(norm.values, new.cust.norm)
train.norm.df <- train.df[,-10] # Note that Personal Income is the 10th variable
valid.norm.df <- valid.df[,-10]
norm.values <- preProcess(train.df[, -10], method=c("center", "scale"))
train.norm.df <- predict(norm.values, train.df[, -10])
valid.norm.df <- predict(norm.values, valid.df[, -10])
# We have converted all categorical variables to dummy variables
# Let's create a new sample
new_customer <- data.frame(
Age = 40,
Experience = 10,
Income = 84,
Family = 2,
CCAvg = 2,
Education.1 = 0,
Education.2 = 1,
Education.3 = 0,
Mortgage = 0,
Securities.Account = 0,
CD.Account = 0,
Online = 1,
CreditCard = 1
)
# Normalize the new customer
new.cust.norm <- new_customer
new.cust.norm <- predict(norm.values, new.cust.norm)
normalized.train <- train_dataset[,-10] # Note that Personal Income is the 10th variable
normalized.valid <- valid_dataset[,-10]
norm.values <- preProcess(train_dataset[, -10], method=c("center", "scale"))
train.norm.df <- predict(norm.values, train_dataset[, -10])
valid.norm.df <- predict(norm.values, valid_dataset[, -10])
# We have converted all categorical variables to dummy variables
# Let's create a new sample
new_customer <- data.frame(
Age = 40,
Experience = 10,
Income = 84,
Family = 2,
CCAvg = 2,
Education.1 = 0,
Education.2 = 1,
Education.3 = 0,
Mortgage = 0,
Securities.Account = 0,
CD.Account = 0,
Online = 1,
CreditCard = 1
)
# Normalize the new customer
new.cust.norm <- new_customer
new.cust.norm <- predict(norm.values, new.cust.norm)
# Only Education needs to be converted to factor
dataset$Education <- as.factor(dataset$Education)
knitr::opts_chunk$set(echo = TRUE)
library(class)
library(caret)
library(e1071)
dataset <- read.csv("./UniversalBank.csv")
dim(dataset)
dataset <- dataset[,-c(1,5)]
# Only Education needs to be converted to factor
dataset$Education <- as.factor(dataset$Education)
# Now, convert Education to Dummy Variables
categories <- dummyVars(~., data = dataset) # This creates the dummy categories
dataset <- as.data.frame(predict(categories,dataset))
set.seed(1)  # Important to ensure that we get the same sample if we rerun the code
training_indices <- sample(row.names(dataset), 0.6*dim(dataset)[1])
validation_indices <- setdiff(row.names(dataset), training_indices)
train_dataset <- dataset[training_indices,]
valid_dataset <- dataset[validation_indices,]
t(t(names(train_dataset)))
normalized.train <- train_dataset[,-10] # Note that Personal Income is the 10th variable
normalized.valid <- valid_dataset[,-10]
norm.values <- preProcess(train_dataset[, -10], method=c("center", "scale"))
train.norm.df <- predict(norm.values, train_dataset[, -10])
valid.norm.df <- predict(norm.values, valid_dataset[, -10])
# We have converted all categorical variables to dummy variables
# Let's create a new sample
new_customer <- data.frame(
Age = 40,
Experience = 10,
Income = 84,
Family = 2,
CCAvg = 2,
Education.1 = 0,
Education.2 = 1,
Education.3 = 0,
Mortgage = 0,
Securities.Account = 0,
CD.Account = 0,
Online = 1,
CreditCard = 1
)
# Normalize the new customer
new.cust.norm <- new_customer
new.cust.norm <- predict(norm.values, new.cust.norm)
# We have converted all categorical variables to dummy variables
# Let's create a new sample
new_customer <- data.frame(
Age = 40,
Experience = 10,
Income = 84,
Family = 2,
CCAvg = 2,
Education.1 = 0,
Education.2 = 1,
Education.3 = 0,
Mortgage = 0,
Securities.Account = 0,
CD.Account = 0,
Online = 1,
CreditCard = 1
)
# Normalize the new customer
new.cust.norm <- new_customer
new.cust.norm <- predict(norm.values, new.cust.norm)
normalized.train <- train_dataset[,-10] # Note that Personal Income is the 10th variable
normalized.valid <- valid_dataset[,-10]
normalized.values <- preProcess(train_dataset[, -10], method=c("center", "scale"))
normalized.train <- predict(normalized.values, train_dataset[, -10])
normalized.valid <- predict(normalized.values, valid_dataset[, -10])
# We have converted all categorical variables to dummy variables
# Let's create a new sample
new_customer <- data.frame(
Age = 40,
Experience = 10,
Income = 84,
Family = 2,
CCAvg = 2,
Education.1 = 0,
Education.2 = 1,
Education.3 = 0,
Mortgage = 0,
Securities.Account = 0,
CD.Account = 0,
Online = 1,
CreditCard = 1
)
# Normalize the new customer
normalized_newcustomer <- new_customer
new.cust.norm <- predict(norm.values, normalized_newcustomer)
# We have converted all categorical variables to dummy variables
# Let's create a new sample
new_customer <- data.frame(
Age = 40,
Experience = 10,
Income = 84,
Family = 2,
CCAvg = 2,
Education.1 = 0,
Education.2 = 1,
Education.3 = 0,
Mortgage = 0,
Securities.Account = 0,
CD.Account = 0,
Online = 1,
CreditCard = 1
)
# Normalize the new customer
normalized_newcustomer <- new_customer
normalized_newcustomer <- predict(normalized.values, normalized_newcustomer)
knn.pred <- class::knn(train = normalized.train,
test = normalized_newcustomer,
cl = train_dataset$Personal.Loan, k = 1)
knn.pred1
knn_predictor <- class::knn(train = normalized.train,
test = normalized_newcustomer,
cl = train_dataset$Personal.Loan, k = 1)
knn_predictor
# Calculate the accuracy for each value of k
# Set the range of k values to consider
accuracyK <- data.frame(k = seq(1, 15, 1), overallaccuracy = rep(0, 15))
for(i in 1:15) {
knn_predictor <- class::knn(train = normalized.train,
test = normalized.valid,
cl = train_dataset$Personal.Loan, k = i)
accuracyK[i, 2] <- confusionMatrix(knn.pred,
as.factor(valid_dataset$Personal.Loan),positive = "1")$overall[1]
}
# Calculate the accuracy for each value of k
# Set the range of k values to consider
accuracyK <- data.frame(k = seq(1, 15, 1), overallaccuracy = rep(0, 15))
for(i in 1:15) {
knn_predictor <- class::knn(train = normalized.train,
test = normalized.valid,
cl = train_dataset$Personal.Loan, k = i)
accuracyK[i, 2] <- confusionMatrix(knn_predictor,
as.factor(valid_dataset$Personal.Loan),positive = "1")$overall[1]
}
selectedK <- which(accuracyK[,2] == max(accuracyK[,2]))
print(paste("The value that best fits is:",selectedK))
plot(accuracyK$k,accuracyK$overallaccuracy,xlab="value of k",ylab="Acuuracy")
knn_predictor <- class::knn(train = normalized.train,
test = normalized.valid,
cl = train_dataset$Personal.Loan, k = 3)
selectedk_matrix <- confusionMatrix(knn_predictor,
as.factor(valid_dataset$Personal.Loan),positive = "1")
selectedk_matrix
# We have converted all categorical variables to dummy variables
# Let's create a new sample
first_customer <- data.frame(
Age = 40,
Experience = 10,
Income = 84,
Family = 2,
CCAvg = 2,
Education.1 = 0,
Education.2 = 1,
Education.3 = 0,
Mortgage = 0,
Securities.Account = 0,
CD.Account = 0,
Online = 1,
CreditCard = 1
)
# Normalize the new customer
normalized_newcustomer <- first_customer
normalized_newcustomer <- predict(normalized.values, normalized_newcustomer)
knn_predictor <- class::knn(train = normalized.train,
test = normalized_newcustomer,
cl = train_dataset$Personal.Loan, k = 1)
knn_predictor
# Calculate the accuracy for each value of k
# Set the range of k values to consider
accuracyK <- data.frame(k = seq(1, 15, 1), overallaccuracy = rep(0, 15))
for(i in 1:15) {
knn_predictor <- class::knn(train = normalized.train,
test = normalized.valid,
cl = train_dataset$Personal.Loan, k = i)
accuracyK[i, 2] <- confusionMatrix(knn_predictor,
as.factor(valid_dataset$Personal.Loan),positive = "1")$overall[1]
}
selectedK <- which(accuracyK[,2] == max(accuracyK[,2]))
print(paste("The selected k value is: ",selectedK))
plot(accuracyK$k,accuracyK$overallaccuracy,xlab="value of k",ylab="Accuracy")
knn_predictor <- class::knn(train = normalized.train,
test = normalized.valid,
cl = train_dataset$Personal.Loan, k = 3)
selectedk_matrix <- confusionMatrix(knn_predictor,
as.factor(valid_dataset$Personal.Loan),positive = "1")
selectedk_matrix
customer2 <- data.frame(
Age = 40,
Experience = 10,
Income = 84,
Family = 2,
CCAvg = 2,
Education.1 = 0,
Education.2 = 1,
Education.3 = 0,
Mortgage = 0,
Securities.Account = 0,
CD.Account = 0,
Online = 1,
CreditCard = 1
)
# Normalize the new customer
normalized_customer2 <- customer2
normalized_customer2 <- predict(normalized.values,normalized_customer2)
knn_predictor <- class::knn(train = normalized.train,
test = normalized_customer2,
cl = train_dataset$Personal.Loan, k = 3)
knn_predictor
#Repartitioning the data.
train.index.new <- sample(row.names(dataset), 0.5*dim(dataset)[1])
valid.index.new <- sample(setdiff(row.names(dataset), train.index.new), 0.3*dim(dataset)[1])
test.index.new <- setdiff(setdiff(row.names(dataset), train.index.new), valid.index.new)
train.set <- dataset[train.index.new,]
valid.set <- dataset[valid.index.new,]
test.set <- dataset[test.index.new,]
train.norm <- train.set[,-10] # Note that Personal Income is the 10th variable
valid.norm <- valid.set[-10]
test.norm <- test.set[-10]
norm.new <- preProcess(train.set[, -10], method=c("center", "scale"))
train.norm <- predict(norm.new, train.set[, -10])
valid.norm <- predict(norm.new, valid.set[, -10])
test.norm<-  predict(norm.new, test.set[-10])
knn.pred.train <- class::knn(train = train.norm,
test = train.norm,
cl = train.set$Personal.Loan, k = 3)
train.matrix <- confusionMatrix(knn.pred.train,as.factor(train.set$Personal.Loan),positive = "1")
train.matrix
knn.pred.valid <- class::knn(train = train.norm,
test = valid.norm,
cl = train.set$Personal.Loan, k = 3)
valid.matrix <- confusionMatrix(knn.pred.valid,as.factor(valid.set$Personal.Loan),positive = "1")
valid.matrix
knn.pred.test <- class::knn(train = train.norm,
test = test.norm,
cl = train.set$Personal.Loan, k = 3)
test.matrix <- confusionMatrix(knn.pred.test,as.factor(test.set$Personal.Loan),positive = "1")
test.matrix
knitr::opts_chunk$set(echo = TRUE)
library(class)
library(caret)
library(e1071)
dataset <- read.csv("./UniversalBank.csv")
dim(dataset)
dataset <- dataset[,-c(1,5)]
# Only Education needs to be converted to factor
dataset$Education <- as.factor(dataset$Education)
# Now, convert Education to Dummy Variables
categories <- dummyVars(~., data = dataset) # This creates the dummy categories
dataset <- as.data.frame(predict(categories,dataset))
set.seed(1)  # Important to ensure that we get the same sample if we rerun the code
training_indices <- sample(row.names(dataset), 0.6*dim(dataset)[1])
validation_indices <- setdiff(row.names(dataset), training_indices)
train_dataset <- dataset[training_indices,]
valid_dataset <- dataset[validation_indices,]
t(t(names(train_dataset)))
normalized.train <- train_dataset[,-10] # Note that Personal Income is the 10th variable
normalized.valid <- valid_dataset[,-10]
normalized.values <- preProcess(train_dataset[, -10], method=c("center", "scale"))
normalized.train <- predict(normalized.values, train_dataset[, -10])
normalized.valid <- predict(normalized.values, valid_dataset[, -10])
# We have converted all categorical variables to dummy variables
# Let's create a new sample
customer1 <- data.frame(
Age = 40,
Experience = 10,
Income = 84,
Family = 2,
CCAvg = 2,
Education.1 = 0,
Education.2 = 1,
Education.3 = 0,
Mortgage = 0,
Securities.Account = 0,
CD.Account = 0,
Online = 1,
CreditCard = 1
)
# Normalize the new customer
normalized_customer1 <- customer1
normalized_customer1 <- predict(normalized.values, normalized_customer1)
knn_predictor <- class::knn(train = normalized.train,
test = normalized_customer1,
cl = train_dataset$Personal.Loan, k = 1)
knn_predictor
# Calculate the accuracy for each value of k
# Set the range of k values to consider
accuracyK <- data.frame(k = seq(1, 15, 1), overallaccuracy = rep(0, 15))
for(i in 1:15) {
knn_predictor <- class::knn(train = normalized.train,
test = normalized.valid,
cl = train_dataset$Personal.Loan, k = i)
accuracyK[i, 2] <- confusionMatrix(knn_predictor,
as.factor(valid_dataset$Personal.Loan),positive = "1")$overall[1]
}
selectedK <- which(accuracyK[,2] == max(accuracyK[,2]))
print(paste("The selected k value is: ",selectedK))
plot(accuracyK$k,accuracyK$overallaccuracy,xlab="value of k",ylab="Accuracy")
knn_predictor <- class::knn(train = normalized.train,
test = normalized.valid,
cl = train_dataset$Personal.Loan, k = 3)
selectedk_matrix <- confusionMatrix(knn_predictor,
as.factor(valid_dataset$Personal.Loan),positive = "1")
selectedk_matrix
customer2 <- data.frame(
Age = 40,
Experience = 10,
Income = 84,
Family = 2,
CCAvg = 2,
Education.1 = 0,
Education.2 = 1,
Education.3 = 0,
Mortgage = 0,
Securities.Account = 0,
CD.Account = 0,
Online = 1,
CreditCard = 1
)
# Normalize the new customer
normalized_customer2 <- customer2
normalized_customer2 <- predict(normalized.values,normalized_customer2)
knn_predictor <- class::knn(train = normalized.train,
test = normalized_customer2,
cl = train_dataset$Personal.Loan, k = 3)
knn_predictor
#Re partitioning the data.
new_training_index <- sample(row.names(dataset), 0.5*dim(dataset)[1])
new_valid_index <- sample(setdiff(row.names(dataset), new_training_index), 0.3*dim(dataset)[1])
new_test_index <- setdiff(setdiff(row.names(dataset), new_training_index), new_valid_index)
new_training_set <- dataset[new_training_index,]
new_valid_set <- dataset[new_valid_index,]
new_test_set <- dataset[new_test_index,]
new_train_norm <- new_training_set[,-10] # Note that Personal Income is the 10th variable
new_valid_norm <- new_valid_set[-10]
new_test_norm <- new_test_set[-10]
new_norm <- preProcess(new_training_set[, -10], method=c("center", "scale"))
new_train_norm <- predict(new_norm, new_training_set[, -10])
new_valid_norm <- predict(new_norm, new_valid_set[, -10])
new_test_norm<-  predict(new_norm, new_test_set[-10])
knn_train_predictor <- class::knn(train = new_train_norm,
test = new_train_norm,
cl = new_training_set$Personal.Loan, k = 3)
training_matrix <- confusionMatrix(knn_train_predictor,as.factor(new_training_set$Personal.Loan),positive = "1")
training_matrix
knn_valid_predictor <- class::knn(train = new_train_norm,
test = new_valid_norm,
cl = new_training_set$Personal.Loan, k = 3)
validation_matrix <- confusionMatrix(knn_valid_predictor,as.factor(new_valid_set$Personal.Loan),positive = "1")
validation_matrix
knn_test_predictor <- class::knn(train = new_train_norm,
test = new_test_norm,
cl = new_training_set$Personal.Loan, k = 3)
testing_matrix <- confusionMatrix(knn_test_predictor,as.factor(new_test_set$Personal.Loan),positive = "1")
testing_matrix
